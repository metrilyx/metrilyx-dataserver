#!/bin/sh
#
# description: Metrilyx Data Server.  This provides data via websockets.
#

[ -f "/etc/rc.d/init.d/functions" ] && . /etc/rc.d/init.d/functions
[ -f "/etc/sysconfig/metrilyx" ] && . /etc/sysconfig/metrilyx

PGREP="/usr/bin/pgrep -f"

NAME="metrilyx-dataserver"
METRILYX_HOME="/opt/metrilyx"
BIN=${METRILYX_HOME}/bin/${NAME}.py
LOGDIR="$METRILYX_HOME/logs"
LOGLEVEL="WARNING"
#
# Number of servers to spawn. Increase based on cpu's
SERVER_COUNT=1
#
# Used if running websocket from behind a proxy
#
#EXT_PORT_OPT="-e 80"
EXT_PORT_OPT=""

DEFAULT_OPTS="-l${LOGLEVEL} --log-dir ${LOGDIR} --hostname $(hostname) ${EXT_PORT_OPT}"

RETVAL=0

#
# Detect number of cpu's/cores on the system
#
set_server_count() {
	[ -f /proc/cpuinfo ] || {
		svrcnt = $(cat /proc/cpuinfo | grep processor | wc -l)
		if [ $svrcnt -gt 1 ]; then
			SERVER_COUNT=`expr  $svrcnt \- 1`
		fi
	}
}

check_logdir() {
	if [ ! -d "$LOGDIR" ]; then
	    mkdir -p $LOGDIR;
	fi
}
#
# Starts a single dataserver
#
start_dataserver() {
	PORT=$1
	OPTS="${DEFAULT_OPTS} --port ${PORT}";
	PIDS=`${PGREP} "${BIN} ${OPTS}" | xargs`;

	if [ "$PIDS" = "" ]; then
		echo -n "${NAME} starting (port ${PORT})... "
		METRILYX_HOME=${METRILYX_HOME} PYTHONPATH=${PYTHONPATH} ${BIN} ${OPTS} &
		sleep 2;
		PIDS=`${PGREP} "${BIN} ${OPTS}" | xargs`;
		if [ "$PIDS" = "" ]; then
			echo "[failed]";
			RETVAL=2;
		else
			echo "[ok]";
		fi
	else
		echo -n "${NAME} already running... ${PIDS}";
		RETVAL=1
	fi
}
#
# Start $SERVER_COUNT instances of the dataserver
#
start() {
	check_logdir;
	set_server_count;

	for c in `seq ${SERVER_COUNT}`; do
		PORT=`expr 9000 \+ $c`
		start_dataserver $PORT;
		if [ "$RETVAL" -ne 0 ]; then
			echo "Failed to start server on port: $PORT"
			exit $RETVAL;
		fi
	done
}

status() {
	PIDS=`${PGREP} "${BIN}" | xargs`;
	if [ "$PIDS" = "" ]; then
		echo "${NAME} not running";
	else
		echo "${NAME} running... ${PIDS}"
	fi
}

stop() {
	echo -n "${NAME} stopping...";
	PIDS=`${PGREP} "${BIN}" | sort -r`;
	for pid in $PIDS; do
		kill $pid;
	done
	sleep 2;
	( ${PGREP} "${BIN}" && echo "[failed]" ) || echo "[ok]";
}


case "$1" in
	start)
		start;
		;;
	stop)
		stop;
		;;
	status)
		status;
		;;
	restart)
		$0 stop
		sleep 3
		$0 start
		;;
	*)
		echo "$0 [start|stop|restart|status]"
		exit 1;
esac
exit $RETVAL
